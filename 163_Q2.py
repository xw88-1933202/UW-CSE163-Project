{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd646fa5-d272-4c3b-8bc6-90f2fdf9c9de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "def filter_file(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    '''\n",
    "    Clean the data.\n",
    "    Drop uninformative rows.\n",
    "    '''\n",
    "    df = df.dropna().reset_index(drop=True)          # drop all rows with NaN values\n",
    "    rows_count = len(df.index)\n",
    "    df = df[['age', 'gender', 'bmi', 'bloodpressure', 'diabetic', 'children', 'smoker',\t'region', 'claim']]\n",
    "    # apply mapping to 'diabetic' column\n",
    "    df['diabetic'] = df['diabetic'].map({'Yes': 1, 'No': 0})\n",
    "    # apply mapping to 'smoker' column\n",
    "    df['smoker'] = df['smoker'].map({'Yes': 1, 'No': 0})\n",
    "    return df\n",
    "\n",
    "def percent_diabeic(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    df['diabetic'] = pd.to_numeric(df['diabetic'], errors='coerce')\n",
    "    # calculate proportion of diabetic individuals in each region\n",
    "    prop_dia = df.groupby('region')['diabetic'].mean()\n",
    "    return prop_dia\n",
    "\n",
    "def percent_smoker(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    df['smoker'] = pd.to_numeric(df['smoker'], errors='coerce')\n",
    "    # calculate proportion of smoker individuals in each region\n",
    "    prop_smoker = df.groupby('region')['smoker'].mean()\n",
    "    return prop_smoker\n",
    "\n",
    "def dia_amount(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    # claim related the diabetic by region\n",
    "    filter_dia = df[df['diabetic'] == 1]\n",
    "    ave_dia_claim = filter_dia.groupby('region')['claim'].mean()\n",
    "    ave_dia_claim\n",
    "    # claim related the no diabetic by region\n",
    "    filter_no_dia = df[df['diabetic'] == 0]\n",
    "    ave_no_dia_claim = filter_no_dia.groupby('region')['claim'].mean()\n",
    "    return (ave_dia_claim, ave_no_dia_claim)\n",
    "\n",
    "def smoker_amount(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    # claim related the smoker by region\n",
    "    filter_smoker = df[df['smoker'] == 1]\n",
    "    ave_smoker_claim = filter_smoker.groupby('region')['claim'].mean()\n",
    "    # claim related the no smoker by region\n",
    "    filter_no_smoker = df[df['smoker'] == 0]\n",
    "    ave_no_smoker_claim = filter_no_smoker.groupby('region')['claim'].mean()\n",
    "    return (ave_smoker_claim, ave_no_smoker_claim)\n",
    "\n",
    "def ave_amount(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    ave_claim = df.groupby('region')['claim'].mean()\n",
    "    return ave_claim\n",
    "    \n",
    "def plot_percentage(df: pd.DataFrame) -> None:\n",
    "    prop_dia = percent_diabeic(df)\n",
    "    prop_smoker = percent_smoker(df)\n",
    "\n",
    "    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n",
    "\n",
    "    prop_dia.plot(kind='bar', ax=ax[0])\n",
    "    ax[0].set_title('Percentage of Diabetics by Region')\n",
    "    ax[0].set_xlabel('Region')\n",
    "    ax[0].set_ylabel('Percentage')\n",
    "\n",
    "    prop_smoker.plot(kind='bar', ax=ax[1])\n",
    "    ax[1].set_title('Percentage of Smokers by Region')\n",
    "    ax[1].set_xlabel('Region')\n",
    "    ax[1].set_ylabel('Percentage')\n",
    "\n",
    "    fig.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def plot_claim(df: pd.DataFrame) -> None:  \n",
    "    fig, axs = plt.subplots(ncols=3, figsize=(15,5))\n",
    "    \n",
    "    # Plot 1: Average claim amount for diabetic and non-diabetic individuals\n",
    "    ave_dia_claim, ave_no_dia_claim = dia_amount(df)\n",
    "    dia_data = pd.DataFrame({'Diabetic': ave_dia_claim, 'Non-Diabetic': ave_no_dia_claim})\n",
    "    sns.barplot(data=dia_data, ax=axs[0])\n",
    "    axs[0].set_title('Average Claim Amount by Diabetic Status')\n",
    "    \n",
    "    # Plot 2: Average claim amount for smoker and non-smoker individuals\n",
    "    ave_smoker_claim, ave_no_smoker_claim = smoker_amount(df)\n",
    "    smoker_data = pd.DataFrame({'Smoker': ave_smoker_claim, 'Non-Smoker': ave_no_smoker_claim})\n",
    "    sns.barplot(data=smoker_data, ax=axs[1])\n",
    "    axs[1].set_title('Average Claim Amount by Smoker Status')\n",
    "    \n",
    "    # Plot 3: Average claim amount by region\n",
    "    ave_claim = ave_amount(df)\n",
    "    sns.barplot(x=ave_claim.index, y=ave_claim.values, ax=axs[2])\n",
    "    axs[2].set_title('Average Claim Amount by Region')\n",
    "    axs[2].set_xlabel('Region')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def main():\n",
    "    data = pd.read_csv('insurance_data.csv')\n",
    "    # Call functions here\n",
    "    percent_diabeic(data)\n",
    "    percent_smoker(data)\n",
    "    dia_amount(data)\n",
    "    smoker_amount(data)\n",
    "    ave_amount(data)\n",
    "    plot_percentage(data)\n",
    "    plot_claim(data)\n",
    "    \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
